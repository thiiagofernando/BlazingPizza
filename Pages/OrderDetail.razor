@page "/myorders/{orderId:int}"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@implements IDisposable

<div class="main">
    @if (invalidOrder)
    {
        <h2>Pedido não encontrado</h2>
        <p>Lamentamos, mas este pedido não existe mais.</p>
    }
    else if (orderWithStatus == null)
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    <text>Carregando...</text>
                </h2>
                <p class="ml-auto mb-0">
                    ...
                </p>
            </div>
        </div>
    }
    else
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    Pedido feito @orderWithStatus.Order.CreatedTime.ToLongDateString()
                </h2>
                <p class="ml-auto mb-0">
                    Status: <strong>@orderWithStatus.StatusText</strong>
                </p>
            </div>
            <div class="track-order-body">
                <div class="track-order-details">
                    @if (IsOrderIncomplete)
                    {
                        <div class="spinner-grow text-danger float-right" role="status">
                            <span class="sr-only">Verificando o status do seu pedido...</span>
                        </div>
                    }
                    @foreach (var pizza in orderWithStatus.Order.Pizzas)
                    {
                        <p>
                            <strong>
                                @(pizza.Size)"
                                @pizza.Special.Name
                                (R$@pizza.GetFormattedTotalPrice())
                            </strong>
                        </p>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int OrderId { get; set; }

    OrderWithStatus orderWithStatus;
    bool invalidOrder = false;

    bool IsOrderIncomplete =>
    orderWithStatus is null || orderWithStatus.IsDelivered == false;

    PeriodicTimer timer = new(TimeSpan.FromSeconds(3));
    protected override async Task OnParametersSetAsync() => await GetLatestOrderStatusUpdatesAsync();

    protected override Task OnAfterRenderAsync(bool firstRender) =>
    firstRender ? StartPollingTimerAsync() : Task.CompletedTask;

    async Task GetLatestOrderStatusUpdatesAsync()
    {
        try
        {
            orderWithStatus = await HttpClient.GetFromJsonAsync<OrderWithStatus>(
            $"{NavigationManager.BaseUri}orders/{OrderId}");
        }
        catch (Exception ex)
        {
            invalidOrder = true;
            Console.Error.WriteLine(ex);
        }
    }

    async Task StartPollingTimerAsync()
    {
        while (IsOrderIncomplete && await timer.WaitForNextTickAsync())
        {
            await GetLatestOrderStatusUpdatesAsync();
            StateHasChanged();
        }
    }

    public void Dispose() => timer.Dispose();
}