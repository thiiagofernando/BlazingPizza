@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using BlazingPizza.Services
@inject OrderState OrderState
@inject OrderState OrderState
@inject IJSRuntime JavaScript

<div class="main">
  <ul class="pizza-cards">
    @if (specials != null)
    {
      @foreach (var special in specials)
      {
        <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))"
          style="background-image: url('@special.ImageUrl')">
          <div class="pizza-info">
            <span class="title">@special.Name</span>
            @special.Description
            <span class="price">@special.GetFormattedBasePrice()</span>
          </div>
        </li>
      }
    }
  </ul>
</div>
@if (OrderState.ShowingConfigureDialog)
{
  <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnCancel="OrderState.CancelConfigurePizzaDialog"
    OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}
<div class="sidebar">
  @if (order.Pizzas.Any())
  {
    <div class="order-contents">
      <h2>Itens do pedido</h2>

      @foreach (var configuredPizza in order.Pizzas)
      {
        <div class="cart-item">
          <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
          <div class="item-price">
            @configuredPizza.GetFormattedTotalPrice()
          </div>
          @* <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a> *@
          <button type="button" class="close text-danger" aria-label="Close"
            @onclick="@(async () => await RemovePizzaConfirmation(configuredPizza))">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
      }
    </div>
  }
  else
  {
    <div class="empty-cart">Escolha uma pizza<br>para começar</div>
  }

  <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
    Total:
    <span class="total-price">@order.GetFormattedTotalPrice()</span>
    <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
      Pedido
    </a>
  </div>
</div>
@code {

  List<PizzaSpecial> specials = new();
  Order order => OrderState.Order;

  async Task RemovePizzaConfirmation(Pizza removePizza)
  {
    if (await JavaScript.InvokeAsync<bool>(
    "confirm",
            $"""Você deseja remover "{removePizza.Special!.Name}" do seu pedido?"""))
    {
      OrderState.RemoveConfiguredPizza(removePizza);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
  }
}