@page "/checkout"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using BlazingPizza.Services
@inject OrderState OrderState

<div class="top-bar">
    <a class="logo" href="">
        <img src="img/logo.svg" />
    </a>

    <a href="" class="nav-tab active">
        <img src="img/pizza-slice.svg" />
        <div>Escolher uma pizza</div>
    </a>

    <a href="myorders" class="nav-tab">
        <img src="img/bike.svg" />
        <div>Meus pedidos</div>
    </a>

</div>

<div class="main">
     <EditForm Model=Order.DeliveryAddress OnSubmit=CheckSubmission>
    <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Itens do pedido</h4>
            <OrderReview Order="Order" />
        </div>

        <div class="checkout-delivery-address">
            <h4>Endereço de entrega</h4>
                @if (isError)
                {
                    <div class="alert alert-danger">
                        Por favor insira um nome e endereço.
                    </div>
                }
            <AddressEditor Address="Order.DeliveryAddress" />
        </div>
    </div>

        <button class="checkout-button btn btn-warning" disabled=@isSubmitting>
        Confirmar pedido
    </button>
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;
    bool isSubmitting;
    bool isError = false;

    private async Task CheckSubmission(EditContext editContext)
    {
        isSubmitting = true;
        var model = editContext.Model as Address;
        isError = string.IsNullOrWhiteSpace(model?.Nome)
            || string.IsNullOrWhiteSpace(model?.Telefone)
            || string.IsNullOrWhiteSpace(model?.Cep);
        if (!isError)
        {
            await PlaceOrder();
        }
        isSubmitting = false;
    }

    async Task PlaceOrder()
    {
        var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }
}